variables:
  MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
               -Dorg.slf4j.simpleLogger.showDateTime=true
               -Djava.awt.headless=true
               -Dmaven.repo.local=.m2/repository"
  APT_DEV_BUSTER: https://nexus.ikus-soft.com/repository/minarca-apt-dev-buster/
  APT_DEV_STRETCH: https://nexus.ikus-soft.com/repository/minarca-apt-dev-stretch/
  APT_RELEASE_BUSTER: https://nexus.ikus-soft.com/repository/minarca-apt-release-buster/
  APT_RELEASE_STRETCH: https://nexus.ikus-soft.com/repository/minarca-apt-release-stretch/
  
stages:
- prebuild
- build
- test-package
- publish
- deploy
- test-integration

.prebuild: &prebuild
  image: docker:stable
  stage: prebuild
  services:
    - docker:dind
  script:
  - set
  - apk add make bash
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  - make $CI_JOB_NAME

build-buster-buildpackage:
  <<: *prebuild

build-buster-java8:
  <<: *prebuild
  
build-buster-python3:
  <<: *prebuild
  
build-stretch-buildpackage:
  <<: *prebuild
  
build-stretch-java8:
  <<: *prebuild
  
build-stretch-python2:
  <<: *prebuild

build-stretch-python3:
  <<: *prebuild

build-windows-java8:
  <<: *prebuild

# TODO Split this by python version and OS.
.make: &make
  stage: build
  image: $CI_REGISTRY_IMAGE:$IMAGE-$CI_COMMIT_SHORT_SHA
  script:
  - make $TARGET

test-server_stretch_python2: 
  <<: *make
  variables:
    TARGET: test-server
    IMAGE: stretch-python2

test-server_stretch_python3: 
  <<: *make
  variables:
    TARGET: test-server
    IMAGE: stretch-python3
  
test-server_buster_python3: 
  <<: *make
  variables:
    TARGET: test-server
    IMAGE: buster-python3

test-quota-api_stretch_python2:
  <<: *make
  variables:
    TARGET: test-quota-api
    IMAGE: stretch-python2

test-quota-api_buster_python3:
  <<: *make
  variables:
    TARGET: test-quota-api
    IMAGE: buster-python3

test-client_buster:
  <<: *make
  variables:
    TARGET: test-client
    IMAGE: buster-java8

test-client_windows:
  <<: *make
  variables:
    TARGET: test-client
    IMAGE: windows-java8
    SONAR_URL: ""

build-client:
  <<: *make
  variables:
    TARGET: build-client
    IMAGE: buster-java8
  artifacts:
    paths:
    - minarca-client*.exe
    - minarca-client*.deb

build-server_stretch:
  <<: *make
  variables:
    TARGET: build-server
    IMAGE: stretch-buildpackage
  artifacts:
    paths:
    - minarca-server_*+stretch_amd64.deb
    
build-server_buster:
  <<: *make
  variables:
    TARGET: build-server
    IMAGE: buster-buildpackage
  artifacts:
    paths:
    - minarca-server_*+buster_amd64.deb

test-server_stretch_deb:
  stage: test-package
  image: buildpack-deps:stretch
  script: 
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+stretch_amd64.deb)
  - bash ./tests/install-server-deb.sh $MINARCA_DEB_FILE
  
test-server_buster_deb:
  stage: test-package
  image: buildpack-deps:buster
  script:
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+buster_amd64.deb)
  - bash ./tests/install-server-deb.sh $MINARCA_DEB_FILE

test-client_stretch_deb:
  stage: test-package
  image: buildpack-deps:stretch
  script:
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client*.deb)
  - bash ./tests/install-client-deb.sh

test-client_buster_deb:
  stage: test-package
  image: buildpack-deps:buster
  script:
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client*.deb)
  - bash ./tests/install-client-deb.sh

test-client_windows_exe:
  stage: test-package
  image: buildpack-deps:stretch
  script:
  - export MINARCA_EXE_FILE=$(ls -1 minarca-client*.exe)
  - bash ./tests/install-client-win.sh

publish-www-dev:
  stage: publish
  image: buildpack-deps:buster
  except:
  - tags
  script:
  # Publish to kalo
  - eval $(ssh-agent -s)
  - echo "$KALO_WWWDATA_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  # publish server
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+stretch_amd64.deb)
  - scp -o StrictHostKeyChecking=no $MINARCA_DEB_FILE www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/nightly/
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+buster_amd64.deb)
  - scp -o StrictHostKeyChecking=no $MINARCA_DEB_FILE www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/nightly/
  # publish client
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client*.deb)
  - export MINARCA_EXE_FILE=$(ls -1 ./minarca-client*.exe)
  - scp -o StrictHostKeyChecking=no $MINARCA_DEB_FILE www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/nightly/
  - scp -o StrictHostKeyChecking=no $MINARCA_EXE_FILE www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/nightly/
  # Publish get-minarca.sh script
  - scp -o StrictHostKeyChecking=no ./get-minarca.sh www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/nightly/

publish-apt-dev:
  stage: publish
  image: buildpack-deps:buster
  script: |
    # Minarca Server Stretch
    export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+stretch_amd64.deb)
    curl -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$MINARCA_DEB_FILE" "$APT_DEV_STRETCH"
    # Minarca Server Buster
    export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+buster_amd64.deb)
    curl -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$MINARCA_DEB_FILE" "$APT_DEV_BUSTER"
    # Minarca Client
    export MINARCA_DEB_FILE=$(ls -1 ./minarca-client*.deb)
    curl -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$MINARCA_DEB_FILE" "$APT_DEV_STRETCH"
    curl -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$MINARCA_DEB_FILE" "$APT_DEV_BUSTER"

publish-www-release:
  stage: publish
  only:
  - tags
  script:
  # Setup authentication
  - eval $(ssh-agent -s)
  - echo "$KALO_WWWDATA_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  # Publish stretch package to kalo
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+stretch_amd64.deb)
  - scp -o StrictHostKeyChecking=no $MINARCA_DEB_FILE www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/
  - ssh -o StrictHostKeyChecking=no www-data@kalo.ikus-soft.com ln -fs /var/www/patrikdufresne/archive/minarca/$MINARCA_DEB_FILE /var/www/patrikdufresne/archive/minarca/minarca-server_latest+stretch_amd64.deb
  # Publish buster package to kalo
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+buster_amd64.deb)
  - scp -o StrictHostKeyChecking=no $MINARCA_DEB_FILE www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/
  - ssh -o StrictHostKeyChecking=no www-data@kalo.ikus-soft.com ln -fs /var/www/patrikdufresne/archive/minarca/$MINARCA_DEB_FILE /var/www/patrikdufresne/archive/minarca/minarca-server_latest+buster_amd64.deb
  # Publish client to kalo
  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client*.deb)
  - export MINARCA_EXE_FILE=$(ls -1 ./minarca-client*.exe)
  - scp -o StrictHostKeyChecking=no $MINARCA_EXE_FILE www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/
  - scp -o StrictHostKeyChecking=no $MINARCA_DEB_FILE www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/
  - ssh -o StrictHostKeyChecking=no www-data@kalo.ikus-soft.com ln -fs $(basename $MINARCA_EXE_FILE) /var/www/patrikdufresne/archive/minarca/minarca-latest-install.exe
  - ssh -o StrictHostKeyChecking=no www-data@kalo.ikus-soft.com ln -fs $(basename $MINARCA_DEB_FILE) /var/www/patrikdufresne/archive/minarca/minarca-client_latest_all.deb
  # Publish get-minarca.sh script
  - scp -o StrictHostKeyChecking=no ./get-minarca.sh www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/minarca/

publish-apt-release:
  stage: publish
  image: buildpack-deps:buster
  only:
  - /^[0-9]+\.[0-9]+\.[0-9]+$/
  script: |
    # Minarca Server Stretch
    export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+stretch_amd64.deb)
    curl -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$MINARCA_DEB_FILE" "$APT_RELEASE_STRETCH" 
    # Minarca Server Buster
    export MINARCA_DEB_FILE=$(ls -1 ./minarca-server_*+buster_amd64.deb)
    curl -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$MINARCA_DEB_FILE" "$APT_RELEASE_BUSTER"
    # Minarca Client
    export MINARCA_DEB_FILE=$(ls -1 ./minarca-client*.deb)
    curl -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$MINARCA_DEB_FILE" "$APT_RELEASE_STRETCH"
    curl -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$MINARCA_DEB_FILE" "$APT_RELEASE_BUSTER"

deploy_docker_debian_stretch:
  stage: deploy
  image: buildpack-deps:stretch
  script:
  - export MINARCA_VERSION=$(make version)
  - ./get-minarca.sh --dev --version $MINARCA_VERSION

deploy_docker_debian_buster:
  stage: deploy
  image: buildpack-deps:buster
  script:
  - export MINARCA_VERSION=$(make version)
  - ./get-minarca.sh --dev --version $MINARCA_VERSION

deploy_staging_sestican:
  stage: deploy
  image: ikus060/ansible
  variables:
    DIST: stretch
  environment:
    name: staging
    url: https://test.minarca.net
  script:
  - export MINARCA_VERSION=$(make version)
  - echo MINARCA_VERSION=$MINARCA_VERSION
  - curl -X POST -F token=36bae86778d901fc6b2d6453a41844 -F "ref=master" -F "variables[MINARCA_VERSION]=$MINARCA_VERSION" https://gitlab.com/api/v4/projects/18716492/trigger/pipeline
  
#test_link_debian_stretch:
#  image: debian:stretch
#  stage: test-integration
#  variables:
#    MINARCA_REPOSITORYNAME: test-${CI_JOB_ID}
#  script: 
#  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client*.deb)
#  - bash ./tests/install-client-deb.sh
#  - bash ./tests/link-link-deb-linux.sh
  
#test_link_debian_buster:
#  image: debian:buster
#  stage: test-integration
#  variables:
#    MINARCA_REPOSITORYNAME: test-${CI_JOB_ID}
#  script: 
#  - export MINARCA_DEB_FILE=$(ls -1 ./minarca-client*.deb)
#  - bash ./tests/install-client-deb.sh
#  - bash ./tests/link-link-deb-linux.sh

# This test is not working and fail because of issue with wine.
#test_link_win:
#  image: debian:buster
#  stage: test-integration
#  variables:
#    MINARCA_REPOSITORYNAME: test-${CI_JOB_ID}
#  allow_failure: true
#  script: 
#  - export MINARCA_EXE_FILE=$(ls -1 ./minarca-client*.exe)
#  - bash ./tests/install-client-win.sh
#  - bash ./tests/link-link-win.sh
  